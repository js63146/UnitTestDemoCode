
The Open / Close Principle – Open to extension but closed to modification. What’s your pattern approach?

closed to modification.
class CreditCardInterest

open for extension
class VisaCreditCardInterestBuilder : public CreditCardInterestBuilder

======================================================================

The Liskov Substitution Principle – Are your subtypes substitutable for your base types?
Yes
class MCCreditCardInterestBuilder : public CreditCardInterestBuilder
{
    public:
        virtual ~MCCreditCardInterestBuilder() {};

        virtual void buildCreditCardInterest()
        {
            m_CreditCardInterest->setInterest(0.05, 100);
        }

        virtual int CalcCreditCardInterest()
        {
            return m_CreditCardInterest->GetInterest();
        }
        
};
======================================================================

The Dependency Inversion Principle – Do you have hidden dependencies that prevent you from testing without fakes or mocks?
No.

    High level modules doesn't depend upon low level modules. it depend upon abstractions.
    Abstractions doesn't not depend upon details. Details depend upon abstractions.

======================================================================




    S-> Single responsibility
    O-> Open Closed
    L-> Liskov substitution
    I-> Interface segregation
    D-> Dependency inversion


Single Responsibility  principle
Every class should have a single responsibility

O-> Open Closed
Answer: " software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification "  

Liskov substitution
objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program

Interface segregation
No client should be forced to depend on methods it does not use

Dependency inversion
High-level modules should not depend on low-level modules. Both should depend on abstraction.
Abstractions should not depend upon details. Details should depend upon abstractions.


Single Responsibility Principle
In this context a responsibility is considered to be one reason to change. This principle states that if we have 2 reasons to change for a class, 
we have to split the functionality in two classes. Each class will handle only one responsibility and on future if we need to make one change 
we are going to make it in the class which handle it. When we need to make a change in a class having more responsibilities the change 
might affect the other functionality of the classes.
